package messageformats;

import java.sql.Timestamp;
import java.util.Optional;

public class KrbKdcReq implements ImmutableKrbKdcReq {
    /*
       This field contains the name part of the client’s principal identifier.
     */
    private PrincipalName cname;
    /*
       This field specifies all components of the name part of the
       server’s identity, including those parts that identify a specific
       instance of a service.
     */
    private PrincipalName sname;
    /*
      This field specifies the desired starttime for the requested ticket.
      If this field is omitted, then the KDC SHOULD use the current time instead.
     */
    private Optional<Timestamp> from;
    /*
      This field contains the expiration date requested by the client in a ticket request
     */
    private Timestamp till;
    /*
      This field is intended to hold a random number generated by the client. Used to thwart Replay attacks.
     */
    private int nonce;
    /*
      This field specifies the desired encryption algorithm to be used in the response.
     */
    private int etype; // TODO: is this needed?

    public KrbKdcReq(PrincipalName cname, PrincipalName sname, Optional<Timestamp> from, Timestamp till, int nonce, int etype) {
        this.cname = cname;
        this.sname = sname;
        this.from = from;
        this.till = till;
        this.nonce = nonce;
        this.etype = etype;
    }

    public KrbKdcReq(PrincipalName cname, PrincipalName sname, Timestamp till, int nonce, int etype) {
        this.cname = cname;
        this.sname = sname;
        this.till = till;
        this.nonce = nonce;
        this.etype = etype;
    }


    public PrincipalName getCname() {
        return cname;
    }

    public void setCname(PrincipalName cname) {
        this.cname = cname;
    }

    public PrincipalName getSname() {
        return sname;
    }

    public void setSname(PrincipalName sname) {
        this.sname = sname;
    }

    public Optional<Timestamp> getFrom() {
        return from;
    }

    public void setFrom(Optional<Timestamp> from) {
        this.from = from;
    }

    public Timestamp getTill() {
        return till;
    }

    public void setTill(Timestamp till) {
        this.till = till;
    }

    public int getNonce() {
        return nonce;
    }

    public void setNonce(int nonce) {
        this.nonce = nonce;
    }

    public int getEtype() {
        return etype;
    }

    public void setEtype(int etype) {
        this.etype = etype;
    }
}
